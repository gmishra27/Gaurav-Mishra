?str
getwd()
setwd()
weather<-read.table("w.csv",sep=',',header=TRUE)
?read.csv
weather<-read.table("w.csv")
weather=c(1:20)
conn<-dbConnect("PostgreSQL",  dbname="infs494", host="147.126.64.66", port=8432, user="dataminer1", password="fall2015")
installed.packages("RPostgreSQL")
conn<-dbConnect("PostgreSQL",  dbname="infs494", host="147.126.64.66", port=8432, user="dataminer1", password="fall2015")
conn<-dbConnect("PostgreSQL",  dbname="infs494", host="147.126.64.66", port=8432, user="dataminer1", password="spring2018")
conn<-dbConnect("RPostgreSQL",  dbname="infs494", host="147.126.64.66", port=8432, user="dataminer1", password="fall2015")
dev.off()
plot(weather)
ts=weather
plot(ts)
sd(weather)
M=matrix(1:20,nrow=4,ncol=5,byrow = false)
M=matrix(1:20,nrow=4,ncol=5,byrow=false)
M=matrix(1:20,nrow=4,ncol=5,bycol=false)
?matrix
?dfm
Dfm
?Dfm
vf=as.factor(weather)
M=matrix(1:20,nrow=4,ncol=5,byrow = false)
matrix(1:20,nrow=4,ncol=5,byrow = false)
M=matrix(data= 1:20,nrow=4,ncol=5,byrow = false)
M=matrix(1:20,nrow=4,ncol=5,byrow=true)
M=matrix(1:20,nrow=4,ncol=5,byrow = false,dimnames = null)
Dfm=matrix(1:20,nrow=4,ncol=5,byrow = false)
M=matrix(1:20,nrow=4,ncol=5)
M[2:4]
Dfm=list{c(1,2,3),c('A','B','C'),c('100000','200000','300000')}
Dfm=listc(1,2,3),c('A','B','C'),c('100000','200000','300000')
Dfm=list[c(1,2,3),c('A','B','C'),c('100000','200000','300000')]
q(0)
getwd()
setwd("F:/LUC Study Material/ISSCM 495")
getwd()
hpind=read.csv("hpi.csv",sep="|")
View(hpind)
hpind.la=hpind[c("YEAR","CA.Los.Angeles")]
View(hpind.la)
install.packages("stringr")
library(stringr)
hpind.la$YEAR=str_replace(str_replace(hpind.la$YEAR," ",""),"^","01")
hpind.la$YEAR=as.Date(hpind.la$YEAR,"%d%B%Y")
View(hpind.la)
plot(hpind.la,type='l')
DataframeTS = function(x,y) {
styr=as.numeric(format((head(x[1],1)),"%Y"))
stmth=as.numeric(format((head(x[1],1)),"%m"))
endyr=as.numeric(format((tail(x[1],1)),"%Y"))
endmth=as.numeric(format((tail(x[1],1)),"%m"))
return(ts(x[2],start=c(styr,stmth),end=c(endyr,endmth),frequency=y))
}
hpind.ts=DataframeTS(hpind.boston,12)
View(hpind)
plot.ts(hpind.ts,type='l')
hpind.ts=DataframeTS(hpind.boston,12)
hpind.ts=DataframeTS(hpind.la,12)
plot.ts(hpind.ts,type='l')
tsScale=function(x){
fe=x[1]
return((x/fe)*100)
}
hpind.win=window(hpind.ts,start=2008,end=2015)
hpind.win=tsScale(hpind.win)
plot(hpind.win)
hpind.win=window(hpind.ts,start=2012+.50,end=2015)
hpind.win=tsScale(hpind.win)
lag.plot(hpind.win,lag=9,do.lines=FALSE)
install.packages("forecast")
library("forecast")
acf(hpind.win)
seasonplot(hpind.win,year.labels=TRUE, year.labels.left = TRUE,col=1:3)
monthplot(hpind.win)
hpind.test=window(hpind.win,start=2014+.5)
hpind.train=window(hpind.win,end=2014+.30)
hpind.meanf=meanf(hpind.train,h=12)
hpind.meanf
hpind.meanf=meanf(hpind.train,h=6)
hpind.meanf
hpind.test=window(hpind.win,start=2015+.5)
hpind.train=window(hpind.win,end=2016+.30)
hpind.train=window(hpind.win,end=2015+.30)
hpind.train=window(hpind.win,end=2014+.30)
hpind.naive=naive(hpind.train,h=6)
hpind.naive
hpind.snaive=snaive(hpind.train,h=6)
hpind.snaive
hpind.drift=rwf(hpind.train,h=12,drift=TRUE)
hpind.drift
hpind.drift=rwf(hpind.train,h=6,drift=TRUE)
hpind.drift
plot(hpind.meanf,plot.conf=FALSE)
plot(hpind.naive,plot.conf=FALSE)
plot(hpind.snaive,plot.conf=FALSE)
lines(hpind.drift$mean,col=5)
plot(hpind.drift,plot.conf=FALSE)
hpind.test=window(hpind.win,start=2014+1)
hpind.train=window(hpind.win,end=2014+.30)
hpind.meanf=meanf(hpind.train,h=6)
hpind.meanf
hpind.naive
hpind.snaive
plot(hpind.meanf,plot.conf=FALSE)
plot(hpind.win,main="House price index projection for next 12 months",ylab="house price index",xlab="years",xlim=c(2012.0,2016.5),ylim=c(100,135))
lines(hpind.meanf$mean,col=2)
lines(hpind.naive$mean,col=3)
lines(hpind.snaive$mean,col=4)
lines(hpind.drift$mean,col=5)
legend("bottomright", lty=1, col=c(2,3,4,5), cex=0.65,
legend=c("Mean method","Naive method","Seasonal naive method","Drift Method"))
res.meanf=residuals(hpind.meanf)
res.snaive=residuals(hpind.snaive)
res.naive=residuals(hpind.naive)
res.drift=residuals(hpind.drift)
acf(na.omit(res.drift))
acf(na.omit(res.snaive))
acf(na.omit(res.naive))
acf(na.omit(res.meanf))
Box.test(na.omit(res.snaive),lag=10,fitdf=0)
Box.test(na.omit(res.snaive),lag=10,fitdf=0,type="L")
Box.test(na.omit(res.naive),lag=10,fitdf=0)
Box.test(na.omit(res.naive),lag=10,fitdf=0,type="L")
Box.test(na.omit(res.meanf),lag=10,fitdf=0)
Box.test(na.omit(res.meanf),lag=10,fitdf=0,type="L")
Box.test(na.omit(res.drift),lag=10,fitdf=0)
Box.test(na.omit(res.drift),lag=10,fitdf=0,type="L")
fit=HoltWinters(hpind.win)
res=residuals(fit)
acf(res)
plot(fit)
#################################################
fit1 <- ses(hpi.win, alpha = 0.1, initial = "simple", h = 3)
#################################################
fit1 <- ses(hpind.win, alpha = 0.1, initial = "simple", h = 3)
fit2 <- ses(hpind.win, alpha = 0.5, initial = "simple", h = 3)
fit3 <- ses(hpind.win, alpha = 0.9, h= 3)
plot(fit1, plot.conf=FALSE, ylab="home price index-standardized",
xlab="Year", main="plot of hpi-Los Angeles", fcol="white", type="o")
lines(fitted(fit1), col="blue", type="o")
lines(fitted(fit2), col="red", type="o")
lines(fitted(fit3), col="green", type="o")
lines(fit1$mean, col="blue", type="o")
lines(fit2$mean, col="red", type="o")
lines(fit3$mean, col="green", type="o")
lines(fit2$mean, col="red", type="o")
legend("topleft",lty=1, col=c(1,"blue","red","green"),
c("data", expression(alpha == 0.1), expression(alpha == 0.5),
expression(alpha == 0.9)),pch=1)
lines(fit3$mean, col="green", type="o")
hpind.test=window(hpind.win,start=2014+.5)
hpind.train=window(hpind.win,end=2014+.45)
hpi.ses1=ses(hpi.train,alpha=0.1,initial="simple",h=6)
hpi.ses1=ses(hpind.train,alpha=0.1,initial="simple",h=6)
hpi.ses2=ses(hpind.train,alpha=0.5,initial="simple",h=6)
hpi.ses3=ses(hpind.train,alpha=0.9,initial="simple",h=6)
accuracy(hpi.ses1,hpind.test)
accuracy(hpi.ses2,hpind.test)
accuracy(hpi.ses3,hpind.test)
acf(na.omit(res.ses1))
res.ses1=residuals(hpi.ses1)
res.ses2=residuals(hpi.ses2)
res.ses3=residuals(hpi.ses3)
acf(na.omit(res.ses1))
acf(na.omit(res.ses2))
acf(na.omit(res.ses3))
Box.test(na.omit(res.ses1),lag=6,fitdf=0,type="L")
Box.test(na.omit(res.ses2),lag=6,fitdf=0,type="L")
Box.test(na.omit(res.ses3),lag=6,fitdf=0,type="L")
fit1=holt(hpi.train, alpha = 0.8, beta = 0.2, initial = "simple", h = 6)
fit1=holt(hpind.train, alpha = 0.8, beta = 0.2, initial = "simple", h = 6)
## should the trend shows exponential shape, exponential=true ** multiplicative model.
fit2 =holt(hpind.train, alpha = 0.8, beta = 0.2, initial = "simple", exponential = TRUE, h = 6)
fit3 = holt(hpind.train, alpha = 0.8, beta = 0.2, damped = TRUE, initial = "optimal", h = 6)
plot(hpi.win, ylab="home price index-standardized Holts Method",
xlab="Year", xlim=c(2012.0,2016.5),ylim=c(100,135), main="plot of hpi-los angeles", col="black", type="o")
plot(hpind.win, ylab="home price index-standardized Holts Method",
xlab="Year", xlim=c(2012.0,2016.5),ylim=c(100,135), main="plot of hpi-los angeles", col="black", type="o")
lines(fitted(fit1), col="blue", type="o")
lines(fitted(fit2), col="red", type="o")
lines(fitted(fit3), col="green", type="o")
lines(fit1$mean, col="blue", type="o")
lines(fit2$mean, col="red", type="o")
legend("bottomright",lty=1, col=c(1,"blue","red","green"),
c("data", expression(simple), expression(multipicative),
expression(damped)),pch=1)
accuracy(fit1,hpi.test)
accuracy(fit1,hpind.test)
accuracy(fit2,hpind.test)
accuracy(fit3,hpind.test)
res.fit1=residuals(fit1)
res.fit2=residuals(fit2)
res.fit3=residuals(fit3)
acf(na.omit(res.fit1))
acf(na.omit(res.fit2))
acf(na.omit(res.fit3))
Box.test(na.omit(res.fit1),lag=6,fitdf=0,type="L")
Box.test(na.omit(res.fit2),lag=6,fitdf=0,type="L")
Box.test(na.omit(res.fit3),lag=6,fitdf=0,type="L")
fit1 <- hw(hpi.train,seasonal="additive",h=6)
fit1 <- hw(hpind.train,seasonal="additive",h=6)
fit2 <- hw(hpind.train,seasonal="multiplicative",h=6)
plot(hpind.win, ylab="home price index-standardized Holts Method",
xlab="Year", xlim=c(2012.0,2016.5),ylim=c(100,135), main="plot of hpi-los angeles", col="black", type="o")
lines(fitted(fit1), col="blue", type="o")
lines(fitted(fit2), col="red", type="o")
lines(fit1$mean, col="blue", type="o")
lines(fit2$mean, col="red", type="o")
legend("bottomright",lty=1, col=c(1,"blue","red","green"),
c("data", "multipicative",
"additive"),pch=1)
accuracy(fit1,hpi.test)
accuracy(fit1,hpind.test)
accuracy(fit2,hpind.test)
res.fit1=residuals(fit1)
res.fit2=residuals(fit2)
res.fit1=residuals(fit1)
res.fit2=residuals(fit2)
acf(na.omit(res.fit1))
acf(na.omit(res.fit2))
acf(na.omit(res.fit1))
acf(na.omit(res.fit2))
Box.test(na.omit(res.fit1),lag=6,fitdf=0,type="L")
Box.test(na.omit(res.fit2),lag=6,fitdf=0,type="L")
#########################################################################
require(tseries)
acf(hpi.win)
hpi.test=window(hpind.win,start=2014+.5)
hpi.train=window(hpind.win,end=2014+.45)
hpi.diff=diff(hpi.ts,1,2)
plot(hpi.diff)
hpi.diff=diff(hpind.ts,1,2)
plot(hpi.diff)
hpi.diff=diff(hpind.ts,12,1)
plot(hpi.diff)
hpi.diff=diff(diff(BoxCox(hpind.ts,lambda = BoxCox.lambda(hpind.ts)),12,1),1,2)
plot(hpi.diff)
adf.test(hpi.diff,alternative="stationary")
kpss.test(hpi.diff)
hpi.diff=diff(hpi.train,1,1)
kpss.test(hpi.diff)
adf.test(hpi.diff)
Acf(hpi.diff,main="acf",lag.max=72)
adf.test(hpi.diff)
Pacf(hpi.diff,main="pacf")
fit=Arima(hpi.train, order=c(2,1,1))
fit
res=residuals(fit)
hist(res)
Box.test(res,lag=10,fitdf=3,type="L")
##Forecast for 6 months##
fc=forecast(fit,h=6)
plot(fc)
##Forecast for 6 months##
fc=forecast(fit,h=12)
plot(fc)
##Forecast for 6 months##
fc=forecast(fit,h=6)
plot(fc)
lines(hpi.test,col="green")
accuracy(fc,hpi.test)
##Simpler method: auto estimate p, d and q##
fit_auto=auto.arima(hpi.train)
## lets see the model.
fit_auto
#### it gives arima(2,1,0) as ideal model but with just in one step.
fc_auto=forecast(fit_auto,h=6)
plot(fc_auto)
lines(hpi.test,col="green")
accuracy(fc_auto,hpi.test)
